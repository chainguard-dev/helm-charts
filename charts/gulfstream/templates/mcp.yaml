# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Namespace
metadata:
  name: gulfstream
  labels:
    # This is needed by the configmap webhook
    gulfstream.dev/release: devel
    # Don't run these through cosigned!
    policy.sigstore.dev/include: "false"

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gulfstream-rbac
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        gulfstream.dev/controller: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gulfstream-core
  labels:
    gulfstream.dev/controller: "true"
rules:
  # Allow creating events associated with cluster-scoped resources (e.g. our CRDs)
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
  # Needed to watch and load configuration and secret data.
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "update", "watch"]
  # Allow the reconciliation of exactly our validating webhooks.
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations"]
    verbs: ["list", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations"]
    verbs: ["get", "update"]
    resourceNames: ["config.webhook.gulfstream.dev", "validation.webhook.gulfstream.dev"]
  # Allow the reconciliation of exactly our mutating webhooks.
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs: ["list", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs: ["get", "update"]
    resourceNames: ["defaulting.webhook.gulfstream.dev"]
  # Allow the reconciliation of exactly our CRDs.
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "update"]
    resourceNames: ["controllers.gulfstream.dev", "webhooks.gulfstream.dev"]
  # These are the resources that we are controlling.
  - apiGroups: ["gulfstream.dev"]
    resources: ["*"]
    verbs: ["get", "list", "update", "watch"]
  # The webhook configured the namespace as the OwnerRef on various cluster-scoped resources,
  # which requires we can Get the system namespace.
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get"]
    resourceNames: ["gulfstream"]

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gulfstream-namespace-rbac
  namespace: gulfstream
rules:
  # Needed to watch and load configuration and secret data.
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "update", "watch"]

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller
  namespace: gulfstream

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gulfstream-rbac
subjects:
  - kind: ServiceAccount
    name: controller
    namespace: gulfstream
roleRef:
  kind: ClusterRole
  name: gulfstream-rbac
  apiGroup: rbac.authorization.k8s.io

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gulfstream-namespace-rbac
  namespace: gulfstream
subjects:
  - kind: ServiceAccount
    name: controller
    namespace: gulfstream
roleRef:
  kind: Role
  name: gulfstream-namespace-rbac
  apiGroup: rbac.authorization.k8s.io

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: controllers.gulfstream.dev
spec:
  scope: Cluster
  group: gulfstream.dev
  names:
    kind: Controller
    plural: controllers
    singular: controller
    categories:
      - all
      - gulfstream
    shortNames:
      - gsc
  versions:
    - name: v1alpha1
      served: true
      storage: true
      subresources:
        status: {}
      additionalPrinterColumns:
        - name: Ready
          type: string
          jsonPath: ".status.conditions[?(@.type=='Ready')].status"
        - name: Reason
          type: string
          jsonPath: ".status.conditions[?(@.type=='Ready')].reason"
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              description: Spec holds the desired state of the Controller (from the client).
              type: object
              properties:
                authorized:
                  description: Authorized conveys the resources that the controller is allowed to access, but doesn't watch to trigger reconciliation.
                  type: array
                  items:
                    type: object
                    properties:
                      allowCrossNamespace:
                        description: AllowCrossNamespace determines whether these resources may be accessed outside of the primary resource's namespace.  If the primary resource is cluster-scoped, then this field is irrelevant.  If the primary resource is namespace-scoped, then this field must be true to access resources in other namespaces or cluster-scoped resources.
                        type: boolean
                      group:
                        description: Group is the API group of the resources being authorized.
                        type: string
                      resources:
                        description: Resources is the list of resources within the group to authorize.
                        type: array
                        items:
                          type: string
                      verbs:
                        description: Verbs is the list of verbs on these resources to authorize. If Verbs is empty, then all verbs are authorized.
                        type: array
                        items:
                          type: string
                configs:
                  type: array
                  items:
                    type: object
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      onChanged:
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                delegate:
                  description: The URL to delegate reconcilitation to, which must implement the gulfstream proto interface.
                  type: string
                primary:
                  description: Primary conveys the "primary key" resource, in terms of which we orient all reconciliations.
                  type: object
                  properties:
                    group:
                      type: string
                    match:
                      type: array
                      items:
                        type: object
                        properties:
                          fieldPath:
                            type: string
                          value:
                            type: string
                    namespace:
                      description: Namespace is an optional field restricting these resources to a single namespace.
                      type: string
                    resource:
                      type: string
                    resyncPeriod:
                      type: string
                    version:
                      type: string
                secondary:
                  description: Secondary conveys the resources that are watched and accessed as part of reconciling the primary resources.
                  type: array
                  items:
                    type: object
                    properties:
                      group:
                        type: string
                      match:
                        type: array
                        items:
                          type: object
                          properties:
                            fieldPath:
                              type: string
                            value:
                              type: string
                      namespace:
                        description: Namespace is an optional field restricting these resources to a single namespace.
                        type: string
                      relationship:
                        type: string
                      resource:
                        type: string
                      resyncPeriod:
                        type: string
                      version:
                        type: string
            status:
              description: Status communicates the observed state of the Controller (from the controller).
              type: object
              properties:
                annotations:
                  description: Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                conditions:
                  description: Conditions the latest available observations of a resource's current state.
                  type: array
                  items:
                    type: object
                    required:
                      - type
                      - status
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      severity:
                        description: Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of condition.
                        type: string
                observedGeneration:
                  description: ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
                  type: integer
                  format: int64

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: webhooks.gulfstream.dev
spec:
  scope: Cluster
  group: gulfstream.dev
  names:
    kind: Webhook
    plural: webhooks
    singular: webhook
    categories:
      - all
      - gulfstream
    shortNames:
      - gsw
  versions:
    - name: v1alpha1
      served: true
      storage: true
      subresources:
        status: {}
      additionalPrinterColumns:
        - name: Ready
          type: string
          jsonPath: ".status.conditions[?(@.type=='Ready')].status"
        - name: Reason
          type: string
          jsonPath: ".status.conditions[?(@.type=='Ready')].reason"
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              description: Spec holds the desired state of the Webhook (from the client).
              type: object
              properties:
                authorized:
                  description: Authorized conveys the resources that the Webhook is allowed to access, but doesn't watch to trigger reconciliation.
                  type: array
                  items:
                    type: object
                    properties:
                      allowCrossNamespace:
                        description: AllowCrossNamespace determines whether these resources may be accessed outside of the primary resource's namespace.  If the primary resource is cluster-scoped, then this field is irrelevant.  If the primary resource is namespace-scoped, then this field must be true to access resources in other namespaces or cluster-scoped resources.
                        type: boolean
                      group:
                        description: Group is the API group of the resources being authorized.
                        type: string
                      resources:
                        description: Resources is the list of resources within the group to authorize.
                        type: array
                        items:
                          type: string
                      verbs:
                        description: Verbs is the list of verbs on these resources to authorize. If Verbs is empty, then all verbs are authorized.
                        type: array
                        items:
                          type: string
                configs:
                  type: array
                  items:
                    type: object
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      onChanged:
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                delegate:
                  description: The URL to delegate reconcilitation to, which must implement the gulfstream proto interface.
                  type: string
                ref:
                  description: Ref contains a reference to the resource with an embedded webhook configuration.  This currently supports MutatingWebhookConfiguration, ValidatingWebhookConfiguration, and CustomResourceDefinition.
                  type: object
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    kind:
                      description: Kind of the referent.
                      type: string
                    name:
                      description: Name of the referent. Mutually exclusive with Selector.
                      type: string
                    namespace:
                      description: Namespace of the referent.
                      type: string
                    selector:
                      description: Selector of the referents. Mutually exclusive with Name.
                      type: object
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                description: key is the label key that the selector applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                type: array
                                items:
                                  type: string
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
            status:
              description: Status communicates the observed state of the Webhook (from the Webhook).
              type: object
              properties:
                annotations:
                  description: Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                conditions:
                  description: Conditions the latest available observations of a resource's current state.
                  type: array
                  items:
                    type: object
                    required:
                      - type
                      - status
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      severity:
                        description: Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of condition.
                        type: string
                observedGeneration:
                  description: ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
                  type: integer
                  format: int64

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: meta-controlplane
  name: webhook
  namespace: gulfstream
spec:
  ports:
    - name: https-webhook
      port: 443
      targetPort: 8443
  selector:
    app: meta-controlplane

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.webhook.gulfstream.dev
webhooks:
  - admissionReviewVersions: ["v1"]
    clientConfig:
      service:
        name: webhook
        namespace: gulfstream
    failurePolicy: Fail
    sideEffects: None
    timeoutSeconds: 25
    name: defaulting.webhook.gulfstream.dev
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: validation.webhook.gulfstream.dev
webhooks:
  - admissionReviewVersions: ["v1"]
    clientConfig:
      service:
        name: webhook
        namespace: gulfstream
    failurePolicy: Fail
    sideEffects: None
    timeoutSeconds: 25
    name: validation.webhook.gulfstream.dev
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: config.webhook.gulfstream.dev
webhooks:
  - admissionReviewVersions: ["v1"]
    clientConfig:
      service:
        name: webhook
        namespace: gulfstream
    # This only determines what happens on networking failures,
    # which are most likely for this webhook at install-time, so
    # tell the API server to ignore those, since they are most
    # likely just an install-time race.
    failurePolicy: Ignore
    sideEffects: None
    timeoutSeconds: 25
    name: config.webhook.gulfstream.dev
    namespaceSelector:
      matchExpressions:
        - key: gulfstream.dev/release
          operator: Exists
---
apiVersion: v1
kind: Secret
metadata:
  name: webhook-certs
  namespace: gulfstream
# The data is populated at install time.

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-leader-election
  namespace: gulfstream
  labels:
    gulfstream.dev/release: devel
data:
  # This should match the controlplane's replica count.
  buckets: "2"

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-logging
  namespace: gulfstream
  labels:
    gulfstream.dev/release: devel
data:
  loglevel.controlplane: "info"

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-observability
  namespace: gulfstream
  labels:
    gulfstream.dev/release: devel
data:
  metrics.backend-destination: prometheus
  metrics.request-metrics-backend-destination: prometheus

# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: meta-controlplane
  namespace: gulfstream
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: controlplane
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: meta-controlplane
  namespace: gulfstream
spec:
  # Keep replicas in sync with "buckets" value in config-leader-election.yaml.
  replicas: 2
  # We allow things to deploy and update in parallel, but use a
  # PodDisruptionBudget (above) to ensure that at least 1 pod remains available
  # as we are updating things.  This is a delicate balancing act because:
  # 1. We need to launch the initial set of pods in "Parallel" so that whichever
  #   pod ends up the leader of the webhook cert comes up immediately, but
  # 2. We cannot update all pods in parallel because this serves a webhook that
  #   would become unavailable if all the pods were deleted at once.
  podManagementPolicy: Parallel
  # TODO(mattmoor): Add this once we're on 1.23
  # Wait for 30s before updating the next pod.
  # minReadySeconds: 30
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: meta-controlplane
  serviceName: &service "webhook"
  template:
    metadata:
      labels:
        app: meta-controlplane
    spec:
      # To avoid node becoming SPOF, spread our replicas to different nodes.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            # favor pods on different nodes
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: meta-controlplane
                topologyKey: kubernetes.io/hostname
              weight: 100
              # favor pods in different zones
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: meta-controlplane
                topologyKey: "topology.kubernetes.io/zone"
              weight: 100
      serviceAccountName: controller
      containers:
        - name: controller
          image: us.gcr.io/prod-enforce-fabc/controlplane@sha256:fbf7ce263314a32196b74eade6ff3a02a1edeffd6e1ab96fff941e2d25f83f6b
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 1000m
              memory: 1000Mi
          ports:
            - name: https-webhook
              containerPort: 8443
          readinessProbe:
            periodSeconds: 1
            httpGet:
              scheme: HTTPS
              port: 8443
              httpHeaders:
                - name: k-kubelet-probe
                  value: "meta-controlplane"
          livenessProbe:
            periodSeconds: 1
            failureThreshold: 50
            httpGet:
              scheme: HTTPS
              port: 8443
              httpHeaders:
                - name: k-kubelet-probe
                  value: "meta-controlplane"
          env:
            - name: KUBERNETES_MIN_VERSION
              value: "1.21.0"
            # These settings are used for statefulset-based
            # leader selection.
            - name: STATEFUL_CONTROLLER_ORDINAL
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STATEFUL_SERVICE_NAME
              value: *service
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONFIG_LOGGING_NAME
              value: config-logging
            - name: CONFIG_OBSERVABILITY_NAME
              value: config-observability
            - name: METRICS_DOMAIN
              value: gulfstream.dev/meta
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - all
          volumeMounts:
            # To remove the STS process, replace this with oidc-token,
            # drop the sidecar, and the sts-token volume below.
            - name: sts-token
              mountPath: /var/run/gulfstream
        - name: sts
          # The STS container is responsible for normalizing federated OIDC
          # tokens by using `chainctl auth login [...] --refresh` with the
          # "sts-in" identity token.
          image: us.gcr.io/prod-enforce-fabc/chainctl@sha256:290011e7fb9e6e4e5cd80c6e13b4487e2230b45465c5072126c402c8addb876e
          readinessProbe:
            exec:
              command:
                - /ko-app/chainctl
                - auth
                - status
                # Don't call any APIs, just do some basic
                # token integrity checks.
                - --quick
            initialDelaySeconds: 1
            periodSeconds: 5
          args: ["auth", "login", "--audience", "gulfstream", "--identity-token", "/var/run/sts-in/oidc-token", "--gulfstream",
            # When INVITE_CODE is populated, failures to exchange tokens
            # will cause us to attempt to register this service account
            # and cluster using the invite code as authentication.
          ]
          env:
            - name: XDG_CACHE_HOME
              value: /var/run/sts-out
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: INVITE_CODE
              valueFrom:
                secretKeyRef:
                  name: mcp-creds
                  key: code
                  optional: true
            - name: IDENTITY_UID
              valueFrom:
                secretKeyRef:
                  name: mcp-creds
                  key: identity-uid
                  optional: true
            # If we mount GCP credentials, this is where we will mount them.
            - name: GOOGLE_APPLICATION_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: mcp-creds
                  key: gcp-svc-acct-path
                  optional: true
            - name: GOOGLE_SERVICE_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: mcp-creds
                  key: gcp-svc-acct-name
                  optional: true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - all
          volumeMounts:
            - mountPath: /var/run/sts-in
              name: oidc-token
              readOnly: true
            - mountPath: /var/run/sts-out/chainguard
              name: sts-token
            - name: mcp-creds
              mountPath: /var/run/sts
              readOnly: true
      volumes:
        - name: sts-token
          emptyDir: {}
        - name: oidc-token
          projected:
            sources:
              - serviceAccountToken:
                  path: oidc-token
                  # 600 is the shortest supported lifespan
                  expirationSeconds: 600
                  audience: gulfstream
        - name: mcp-creds
          secret:
            secretName: mcp-creds
            optional: true
            items:
              - key: gcp.json
                path: gcp.json
---


---
